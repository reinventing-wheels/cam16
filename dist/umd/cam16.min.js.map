{"version":3,"file":"cam16.min.js","sources":["../../src/math.ts","../../src/illuminants/cie1931.ts","../../src/util.ts","../../src/transforms/forward.ts","../../src/transforms/reverse.ts","../../src/cam16.ts","../../src/cam16ucs.ts"],"sourcesContent":["export const {\n  abs, acos, acosh, asin, asinh, atan, atan2, atanh, cbrt, ceil, clz32,\n  cos, cosh, exp, expm1, floor, fround, hypot, imul, log, log10, log1p,\n  log2, max, min, pow, random, round, sign, sin, sinh, sqrt, tan, tanh,\n  trunc, E, LN10, LN2, LOG10E, LOG2E, PI, SQRT1_2, SQRT2\n} = Math\n\nexport const {\n  isFinite,\n  isInteger,\n  isNaN,\n  isSafeInteger,\n  parseFloat,\n  parseInt,\n  EPSILON,\n  MAX_SAFE_INTEGER,\n  MAX_VALUE,\n  MIN_SAFE_INTEGER,\n  MIN_VALUE,\n  NEGATIVE_INFINITY,\n  POSITIVE_INFINITY\n} = Number\n\nexport const deg2rad = PI/180\nexport const rad2deg = 180/PI\n\nexport const nan2num = (n: number) =>\n  isNaN(n) ? 0 : isFinite(n) ? n : sign(n) * MAX_VALUE\n","export const A   = [ 109.850, 100,  35.585 ]\nexport const C   = [  98.074, 100, 118.232 ]\nexport const D50 = [  96.422, 100,  82.521 ]\nexport const D55 = [  95.682, 100,  92.149 ]\nexport const D65 = [  95.047, 100, 108.883 ]\nexport const D75 = [  94.972, 100, 122.638 ]\n","// https://docs.scipy.org/doc/numpy/reference/generated/numpy.interp.html\nexport const interp = (xp: number[], fp: number[]) => (x: number) => {\n  for (let i = 1; i < xp.length; i++) {\n    const xʹ = xp[i - 1]\n    const xʺ = xp[i]\n    if (xʹ <= x && x <= xʺ) {\n      const fʹ = fp[i - 1]\n      const fʺ = fp[i]\n      const t = (x - xʹ) / (xʺ - xʹ)\n      return fʹ + t*(fʺ - fʹ)\n    }\n  }\n\n  throw new Error('wtf')\n}\n\n// https://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html\nexport const searchsorted = (a: number[], v: number) => {\n  if (v < a[0])\n    return 0\n\n  if (v > a[a.length-1])\n    return a.length\n\n  for (let i = 1; i < a.length; i++) {\n    const aʹ = a[i - 1]\n    const aʺ = a[i]\n    if (aʹ <= v && v <= aʺ)\n      return i\n  }\n\n  throw new Error('wtf')\n}\n","import { atan2, cos, sqrt, hypot, abs, sign, deg2rad, rad2deg } from '../math'\nimport { searchsorted } from '../util'\nimport { CAM16 } from '../cam16'\n\nexport const forward = (cam: CAM16, RGB_c: number[]) => {\n  // Step 4: Calculate the post-adaptation cone response (resulting in\n  //         dynamic range compression)\n  const α_0 = (cam.F_L * abs(RGB_c[0]) / 100)**0.42\n  const α_1 = (cam.F_L * abs(RGB_c[1]) / 100)**0.42\n  const α_2 = (cam.F_L * abs(RGB_c[2]) / 100)**0.42\n\n  // Omit the 0.1 here; that's canceled out in almost all cases below anyways\n  // (except the computation of `t`).\n  const Rʹ_a = 400 * sign(RGB_c[0]) * α_0/(α_0+27.13) // + 0.1\n  const Gʹ_a = 400 * sign(RGB_c[1]) * α_1/(α_1+27.13) // + 0.1\n  const Bʹ_a = 400 * sign(RGB_c[2]) * α_2/(α_2+27.13) // + 0.1\n\n  // Mix steps 5, 7, and part of step 10 here in one big dot-product.\n  // Step 5: Calculate Redness-Greenness (a) , Yellowness-Blueness (b)\n  //         components and hue angle (h)\n  // Step 7: Calculate achromatic response A\n  const pʹ_2 = 2*Rʹ_a   +    Gʹ_a    +    Bʹ_a/20\n  const a    =   Rʹ_a   - 12*Gʹ_a/11 +    Bʹ_a/11\n  const b    =   Rʹ_a/9 +    Gʹ_a/9  -  2*Bʹ_a/9\n  const u    =   Rʹ_a   +    Gʹ_a    + 21*Bʹ_a/20\n\n  const A = pʹ_2 * cam.N_bb\n  if (A < 0)\n    throw Error('CIECAM02 breakdown')\n\n  // Make sure that h is in [0, 360]\n  const h = (rad2deg*atan2(b, a) + 360) % 360\n\n  // Step 6: Calculate eccentricity (e_t) and hue composition (H), using\n  //         the unique hue data given in Table 2.4.\n  const hʹ = (h - cam.h[0]) % 360 + cam.h[0]\n  const e_t = (cos(deg2rad*hʹ + 2) + 3.8) / 4\n  const i = searchsorted(cam.h, hʹ) - 1\n  const β = cam.e[i+1] * (hʹ - cam.h[i])\n  const H = cam.H[i] + 100*β/(β + cam.e[i]*(cam.h[i+1] - hʹ))\n\n  // Step 8: Calculate the correlate of lightness\n  const J = 100 * (A/cam.A_w)**(cam.c*cam.z)\n\n  // Step 9: Calculate the correlate of brightness\n  const sqrt_J_100 = sqrt(J/100)\n  const Q = (4/cam.c) * sqrt_J_100 * (cam.A_w + 4) * cam.F_L**0.25\n\n  // Step 10: Calculate the correlates of chroma (C), colourfulness (M)\n  //          and saturation (s)\n  //\n  // Note the extra 0.305 here from the adaptation in rgb_a_ above.\n  const t = 50000/13*e_t*cam.N_c*cam.N_cb*hypot(a, b) / (u + 0.305)\n\n  const α = t**0.9 * (1.64 - 0.29**cam.n)**0.73\n  const C = α * sqrt_J_100\n  const M = C * cam.F_L**0.25\n\n  // ENH avoid division by Q=0 here.\n  // s = 100 * numpy.sqrt(M/Q)\n  const s = 50 * sqrt(cam.c*α / (cam.A_w + 4))\n\n  return [J, C, H, h, M, s, Q]\n}\n","import { cos, sin, sqrt, abs, sign, nan2num, deg2rad } from '../math'\nimport { searchsorted } from '../util'\nimport { CAM16 } from '../cam16'\n\nexport const reverse = (cam: CAM16, data: number[], description: string) => {\n  let J, Q, h, α = 0\n\n  if (description[0] === 'J') {\n    J = data[0]\n    // Q perhaps needed for C\n    Q = (4/cam.c) * sqrt(J/100) * (cam.A_w+4) * cam.F_L**0.25\n  }\n  else {\n    // Step 1-1: Compute J from Q (if start from Q)\n    // console.assert(description[0] === 'Q')\n    Q = data[0]\n    J = 6.25 * (cam.c*Q / (cam.A_w+4) / cam.F_L**0.25)**2\n  }\n\n  // Step 1-2: Calculate t from C, M, or s\n  if ('CM'.includes(description[1])) {\n    let M, C\n    if (description[1] === 'M') {\n      M = data[1]\n      C = M / cam.F_L**0.25\n    }\n    else {\n      C = data[1]\n    }\n\n    // If C or M is given and equal 0, the value of `t` cannot\n    // algebraically deduced just by C or M. However, from other\n    // considerations we know that it must be 0. Hence, allow division\n    // by 0 and set nans to 0 afterwards.\n    α = C / sqrt(J/100)\n    α = nan2num(α)\n  }\n  else {\n    // console.assert(description[1] === 's')\n    const s = data[1] / 100\n    // const C = s*s * Q / cam.F_L**0.25\n    α = 4*s*s * (cam.A_w+4) / cam.c\n  }\n\n  const t = (α / (1.64 - 0.29**cam.n)**0.73)**(1/0.9)\n\n  if (description[2] === 'h') {\n    h = data[2]\n  }\n  else {\n    // console.assert(description[2] === 'H')\n    // Step 1-3: Calculate h from H (if start from H)\n    const H = data[2]\n    const i = searchsorted(cam.H, H) - 1\n    const Hi = cam.H[i]\n    const hi = cam.h[i], hi1 = cam.h[i+1]\n    const ei = cam.e[i], ei1 = cam.e[i+1]\n    const hʹ = ((H-Hi)*(ei1*hi-ei*hi1)-100*hi*ei1) / ((H-Hi)*(ei1-ei)-100*ei1)\n    h = hʹ % 360\n  }\n\n  // Step 2: Calculate t, et, p1, p2 and p3\n  const e_t = 0.25 * (cos(deg2rad*h + 2) + 3.8)\n  const A = cam.A_w * (J/100)**(1/cam.c/cam.z)\n  const pʹ_1 = e_t * 50000/13 * cam.N_c * cam.N_cb\n  const pʹ_2 = A / cam.N_bb // no 0.305\n\n  // Step 3: Calculate a and b\n  // ENH Much more straightforward computation of a, b\n  const sin_h = sin(deg2rad*h)\n  const cos_h = cos(deg2rad*h)\n  const γ = 23*(pʹ_2 + 0.305)*t / (23*pʹ_1 + 11*t*cos_h + 108*t*sin_h)\n  const a = γ*cos_h\n  const b = γ*sin_h\n\n  // Step 4: Calculate RGB_a_\n  const Rʹ_a = (460*pʹ_2 + 451*a +  288*b) / 1403\n  const Gʹ_a = (460*pʹ_2 - 891*a -  261*b) / 1403\n  const Bʹ_a = (460*pʹ_2 - 220*a - 6300*b) / 1403\n\n  // Step 5: Calculate RGB_\n  const R_c = sign(Rʹ_a) * 100/cam.F_L * (27.13*abs(Rʹ_a) / (400 - abs(Rʹ_a)))**(1/0.42)\n  const G_c = sign(Gʹ_a) * 100/cam.F_L * (27.13*abs(Gʹ_a) / (400 - abs(Gʹ_a)))**(1/0.42)\n  const B_c = sign(Bʹ_a) * 100/cam.F_L * (27.13*abs(Bʹ_a) / (400 - abs(Bʹ_a)))**(1/0.42)\n\n  return [ R_c, G_c, B_c ]\n}\n","import { PI, exp, sqrt, cbrt, min, max } from './math'\nimport { D65 } from './illuminants/cie1931'\nimport { forward } from './transforms/forward'\nimport { reverse } from './transforms/reverse'\nimport { interp } from './util'\n\nconst M16 = [\n  [+0.401288, +0.650173, -0.051461],\n  [-0.250268, +1.204414, +0.045854],\n  [-0.002079, +0.048952, +0.953127]\n]\n\n// The standard acutally recommends using this approximation as\n// inversion operation.\nconst invM16 = [\n  [+1.86206786, -1.01125463, +0.14918677],\n  [+0.38752654, +0.62144744, -0.00897398],\n  [-0.01584150, -0.03412294, +1.04996444]\n]\n\n// Nc and F are modelled as a function of c, and can be linearly\n// interpolated.\nconst interp_F = interp(\n  [0.525, 0.590, 0.690], // c\n  [0.800, 0.900, 1.000]  // F, N_c\n)\n\nexport class CAM16 {\n  c:     number\n  N_c:   number\n  F_L:   number\n  n:     number\n  z:     number\n  N_bb:  number\n  N_cb:  number\n  A_w:   number\n  h:     number[]\n  e:     number[]\n  H:     number[]\n  Mʹ:    number[][]\n  invMʹ: number[][]\n\n  constructor(c = 0.69, Y_b = 20, L_A = 64/PI/5, wp = D65) {\n    // step0: Calculate all values/parameters which are independent of input\n    //        samples\n    const Y_w = wp[1]\n\n    // console.assert(0.525 <= c && c <= 0.69)\n    const F = interp_F(c)\n    this.c = c\n    this.N_c = F\n\n    const k = 1 / (5*L_A + 1)\n    const k4 = k*k*k*k\n    const l4 = 1 - k4\n    this.F_L = k4*L_A + 0.1*l4*l4*cbrt(5*L_A)\n\n    this.n = Y_b / Y_w\n    this.z = 1.48 + sqrt(this.n)\n    this.N_bb = 0.725 / this.n**0.2\n    this.N_cb = this.N_bb\n\n    const R_w = M16[0][0]*wp[0] + M16[0][1]*wp[1] + M16[0][2]*wp[2]\n    const G_w = M16[1][0]*wp[0] + M16[1][1]*wp[1] + M16[1][2]*wp[2]\n    const B_w = M16[2][0]*wp[0] + M16[2][1]*wp[1] + M16[2][2]*wp[2]\n\n    const D = max(0.0, min(1.0, F*(1-1/3.6*exp((-L_A-42)/92))))\n    const D_r = D*Y_w/R_w + 1 - D\n    const D_g = D*Y_w/G_w + 1 - D\n    const D_b = D*Y_w/B_w + 1 - D\n\n    const R_wc = D_r*R_w\n    const G_wc = D_g*G_w\n    const B_wc = D_b*B_w\n\n    const α_0 = (this.F_L*R_wc/100)**0.42\n    const α_1 = (this.F_L*G_wc/100)**0.42\n    const α_2 = (this.F_L*B_wc/100)**0.42\n\n    const R_aw = 400*α_0/(α_0+27.13)+0.1\n    const G_aw = 400*α_1/(α_1+27.13)+0.1\n    const B_aw = 400*α_2/(α_2+27.13)+0.1\n    this.A_w = (2*R_aw + G_aw + B_aw/20 - 0.305)*this.N_bb\n\n    this.h = [ 20.14,  90.00, 164.25, 237.53, 380.14 ]\n    this.e = [  0.80,   0.70,   1.00,   1.20,   0.80 ]\n    this.H = [  0.00, 100.00, 200.00, 300.00, 400.00 ]\n\n    this.Mʹ = [\n      [M16[0][0]*D_r, M16[0][1]*D_r, M16[0][2]*D_r],\n      [M16[1][0]*D_g, M16[1][1]*D_g, M16[1][2]*D_g],\n      [M16[2][0]*D_b, M16[2][1]*D_b, M16[2][2]*D_b]\n    ]\n\n    this.invMʹ = /* exactInv ? numpy.linalg.inv(this.M_) : */ [\n      [invM16[0][0]/D_r, invM16[0][1]/D_g, invM16[0][2]/D_b],\n      [invM16[1][0]/D_r, invM16[1][1]/D_g, invM16[1][2]/D_b],\n      [invM16[2][0]/D_r, invM16[2][1]/D_g, invM16[2][2]/D_b]\n    ]\n  }\n\n  fromXYZ([ X, Y, Z ]: number[]) {\n    // Step 1: Calculate 'cone' responses\n    // rgb = dot(self.M16, xyz)\n    // Step 2: Complete the color adaptation of the illuminant in\n    //         the corresponding cone response space\n    // rgb_c = (rgb.T * self.D_RGB).T\n    const [ m_0, m_1, m_2 ] = this.Mʹ\n    const RGB_c = [\n      m_0[0]*X + m_0[1]*Y + m_0[2]*Z,\n      m_1[0]*X + m_1[1]*Y + m_1[2]*Z,\n      m_2[0]*X + m_2[1]*Y + m_2[2]*Z\n    ]\n    return forward(this, RGB_c)\n  }\n\n  toXYZ(data: number[], description: string) {\n    // Step 6: Calculate R, G and B\n    // rgb = (rgb_c.T / self.D_RGB).T\n    // Step 7: Calculate X, Y and Z\n    // xyz = self.solve_M16(rgb)\n    const [ R_c, G_c, B_c ] = reverse(this, data, description)\n    const [ m_0, m_1, m_2 ] = this.invMʹ\n    return [\n      m_0[0]*R_c + m_0[1]*G_c + m_0[2]*B_c,\n      m_1[0]*R_c + m_1[1]*G_c + m_1[2]*B_c,\n      m_2[0]*R_c + m_2[1]*G_c + m_2[2]*B_c\n    ]\n  }\n}\n","import { atan2, cos, sin, hypot, exp, log, rad2deg, deg2rad } from './math'\nimport { CAM16 } from './cam16'\n\n// UCS\nconst K_L = 1.0\nconst c_1 = 0.007\nconst c_2 = 0.0228\n\nexport class CAM16UCS extends CAM16 {\n  fromXYZ(xyz: number[]) {\n    // tslint:disable-next-line:whitespace\n    const [J,,, h, M] = super.fromXYZ(xyz)\n    const Jʺ = (1 + 100*c_1)*J / (1 + c_1*J)\n    const Jʹ = Jʺ / K_L\n    const Mʹ = 1/c_2 * log(1 + c_2*M)\n    const hʹ = deg2rad*h\n    return [Jʹ, Mʹ*cos(hʹ), Mʹ*sin(hʹ)]\n  }\n\n  toXYZ([J, a, b]: number[]) {\n    const Jʺ = J * K_L\n    const Jʹ = Jʺ / (1 - (Jʺ - 100)*c_1)\n    const h = rad2deg*atan2(b, a) % 360\n    const M = hypot(a, b)\n    const Mʹ = (exp(M * c_2) - 1) / c_2\n    return super.toXYZ([Jʹ, Mʹ, h], 'JMh')\n  }\n}\n"],"names":["abs","atan2","cbrt","cos","exp","hypot","log","max","min","sign","sin","sqrt","PI","Math","isFinite","isNaN","MAX_VALUE","Number","deg2rad","rad2deg","D65","searchsorted","a","v","length","i","aʺ","Error","forward","cam","RGB_c","α_0","F_L","α_1","α_2","Rʹ_a","Gʹ_a","Bʹ_a","b","u","A","N_bb","h","hʹ","e_t","β","e","H","J","A_w","c","z","sqrt_J_100","Q","α","N_c","N_cb","n","C","reverse","data","description","includes","M","nan2num","s","t","Hi","hi","ei","ei1","pʹ_1","pʹ_2","sin_h","cos_h","γ","M16","invM16","interp_F","xp","fp","x","xʹ","xʺ","fʹ","interp","CAM16","[object Object]","Y_b","L_A","wp","Y_w","F","this","k","k4","l4","R_w","G_w","B_w","D","D_r","D_g","D_b","Mʹ","invMʹ","X","Y","Z","m_0","m_1","m_2","R_c","G_c","B_c","xyz","super","fromXYZ","Jʹ","Jʺ","toXYZ"],"mappings":"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"}